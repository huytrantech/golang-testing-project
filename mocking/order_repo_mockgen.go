// Code generated by MockGen. DO NOT EDIT.
// Source: ./repository/order_repo.go

// Package mocking is a generated GoMock package.
package mocking

import (
	context "context"
	models "golang-testing-project/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIOrderRepository is a mock of IOrderRepository interface.
type MockIOrderRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIOrderRepositoryMockRecorder
}

// MockIOrderRepositoryMockRecorder is the mock recorder for MockIOrderRepository.
type MockIOrderRepositoryMockRecorder struct {
	mock *MockIOrderRepository
}

// NewMockIOrderRepository creates a new mock instance.
func NewMockIOrderRepository(ctrl *gomock.Controller) *MockIOrderRepository {
	mock := &MockIOrderRepository{ctrl: ctrl}
	mock.recorder = &MockIOrderRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIOrderRepository) EXPECT() *MockIOrderRepositoryMockRecorder {
	return m.recorder
}

// FindOrder mocks base method.
func (m *MockIOrderRepository) FindOrder(ctx context.Context, orderCode string) (*models.OrderEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrder", ctx, orderCode)
	ret0, _ := ret[0].(*models.OrderEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrder indicates an expected call of FindOrder.
func (mr *MockIOrderRepositoryMockRecorder) FindOrder(ctx, orderCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrder", reflect.TypeOf((*MockIOrderRepository)(nil).FindOrder), ctx, orderCode)
}
